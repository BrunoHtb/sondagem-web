@page "/cadastro"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1>Cadastros</h1>
<a href="/cadastro/create" class="btn btn-primary">Novo Cadastro</a>

@if(!Registers.Any())
{
    <p class="text-center">Carregando os Cadastros...</p>
}
else
{
    @* <div>
        <div class="form-group">
            <label for="nameFilter">Nome:</label>
            <input type="text" id="nameFilter" @bind="nameFilter" class="form-control" placeholder="Filtrar por nome" />
        </div>
        
        <button class="btn btn-primary" @onclick="ApplyFilters">Aplicar Filtros</button>
    </div> *@

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var register in Registers)
            {
                <tr>
                    <td> @register.Id </td>
                    <td> 
                        <a href="/cadastro/@register.Id">
                            @register.Name
                        </a>
                    </td>
                    <td>
                        <a href="/cadastro/edit/@register.Id" class="btn btn-primary"> Editar </a>
                        &nbsp;&nbsp;
                        <a href="/cadastro/delete/@register.Id" class="btn btn-danger"> Excluir </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    public IEnumerable<Register> Registers { get; set; } = Enumerable.Empty<Register>();
    private string nameFilter = string.Empty;
    private string regionalFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Registers = await Context
            .Registers
            .AsNoTracking()
            .OrderBy(x => x.Name)
            .ToListAsync();
        }
        catch(Exception ex)
        {
            Console.Write(ex);
        }
    }
    private async Task LoadRegistersAsync()
    {
        try
        {
            var query = Context.Registers.AsNoTracking().AsQueryable();

            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                query = query.Where(x => x.Name.Contains(nameFilter));
            }

            if (!string.IsNullOrWhiteSpace(regionalFilter))
            {
                query = query.Where(x => x.Regional.Contains(regionalFilter));
            }

            Registers = await query.OrderBy(x => x.Name).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    private async Task ApplyFilters()
    {
        //await LoadRegistersAsync();
    }
}
